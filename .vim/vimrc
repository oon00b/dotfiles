set encoding=utf-8

augroup vimrc
    autocmd!
augroup END

set nolangremap

set backspace=indent,eol,start
set whichwrap+=[,],<,>

set autoread
set nofixendofline

set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=-1

set autoindent
set smartindent

set formatoptions+=j

set ignorecase
set smartcase
set hlsearch
set incsearch
set tagcase=followscs

set completeopt=menuone,noinsert
if !has('nvim')
    set completeopt+=popup
    set completepopup=height:10,width:60
endif
set wildignorecase

set wildmenu
set wildoptions=fuzzy,tagfile,pum
" wildoptions=pum のときのポップアップメニューの操作をvimと合わせる。
if has('nvim')
    cnoremap <expr> <Up>   pumvisible() ? "\<C-P>" : "\<Up>"
    cnoremap <expr> <Down> pumvisible() ? "\<C-N>" : "\<Down>"
endif

cnoremap <Left>  <Space><Bs><Left>
cnoremap <Right> <Space><Bs><Right>

cnoremap <expr> <CR> pumvisible() ? "\<Space>\<BS>" : "\<CR>"

" <https://gist.github.com/XVilka/8346728>
if has('termguicolors') && expand('$COLORTERM') =~# '\v(truecolor|24bit)'
    set termguicolors

    if has('nvim')
        set winblend=30
        set pumblend=30
    else
        let &t_8f = "\e[38;2;%lu;%lu;%lum"
        let &t_8b = "\e[48;2;%lu;%lu;%lum"
    endif
endif

set cursorline
set display=lastline
set number
set relativenumber

" DECSCUSR(+ vertical, blinking)
" <https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Functions-using-CSI-_-ordered-by-the-final-character_s_>
if !has('nvim') && &term =~? '\v(xterm|konsole|alacritty|st|foot)'
    let &t_EI = "\e[2 q" " normal mode  = block
    let &t_SI = "\e[5 q" " insert mode  = vertical, blinking
    let &t_SR = "\e[4 q" " replace mode = horizontal
endif
set guicursor=n-v-c:block,i-ci-sm:ver1-blinkwait500-blinkon500-blinkoff500,r-cr-o:hor1

set visualbell
set belloff=all

set list
set listchars=tab:>.,trail:&

function! g:MyStatusLine() abort
    let l:mode_string = ''
    let l:patterns = {
                \   '^n': 'Normal'
                \ , "^\\v[vV\<C-V>]": 'Visual'
                \ , "^\\v[sS\<C-S>]": 'Select'
                \ , '^i': 'Insert'
                \ , '^R': 'Replace'
                \ , '^c': 'Command'
                \ , '^t': 'Terminal'
                \ }

    for [l:pattern, l:value] in items(l:patterns)
        if mode() =~# l:pattern
            let l:mode_string = l:value
            break
        endif
    endfor

    if empty(l:mode_string)
        mode_string = "Unknown Mode"
    endif

"Mode | filename[modified][readonly]    [line/lines, column](U+nnnn ~ nnnnnnnn)[filetype]
    return '%#ModeMsg#' .. l:mode_string .. ' %* %t%m%r' .. '%=' .. '[%l/%L, %c](U+%04.8B)%y'
endfunction

set statusline=%{%g:MyStatusLine()%}
set laststatus=2
set showcmd

set title
set titlestring=%F%m%r\ -\ %{v:progname}

set splitright
set helpheight=0
set scrolloff=5

set report=0
set shortmess=aoOc

set clipboard=unnamed,unnamedplus

set mouse=a
if !has('nvim')
    if &term =~? '\v(alacritty|st)'
        set ttymouse=sgr
    endif

    set ttyfast
endif

set mousemodel=popup_setpos
if !has('nvim') && !has('gui_running')
    aunmenu PopUp
    vnoremenu PopUp.Copy y

    if $WAYLAND_DISPLAY != '' && executable('wl-copy') && executable('wl-paste')
        set clipboard^=exclude:*

        autocmd vimrc TextYankPost * call system(
                    \ 'wl-copy'
                    \ , v:event['regcontents']
                    \)

        function! s:sync_clipboard() abort
            const l:reg = getreg('')
            const l:clipboard = system('wl-paste --no-newline')

            if l:reg != l:clipboard .. "\n"
                noautocmd call setreg('', l:clipboard)
            endif

            return ""
        endfunction

        noremap <expr> p <SID>sync_clipboard() .. 'p'
        noremap <expr> P <SID>sync_clipboard() .. 'P'

        amenu PopUp.Paste <Cmd>call <SID>sync_clipboard()<CR><Cmd>normal! gP<CR>
        vmenu PopUp.Paste <Cmd>call <SID>sync_clipboard()<CR>gP
    else
        anoremenu PopUp.Paste <Cmd>normal! gP<CR>
        vnoremenu PopUp.Paste gP
    endif
endif
vnoremenu PopUp.Search\ on\ 'keywordprg' K

set notimeout
set ttimeout
set ttimeoutlen=100

set history=10000
if !has('nvim')
    set viminfo='0,<0,f0,h
    set viminfofile=$HOME/.vim/viminfo
else
    set shada='0,<0,f0,h
endif

if has('nvim')
    execute 'set' 'runtimepath^=' .. expand('<sfile>:p:h')
    execute 'set' 'runtimepath+=' .. expand('<sfile>:p:h') .. '/after'
    let &packpath = &runtimepath
endif

" $VIMRUNTIME/plugin
let g:loaded_2html_plugin = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_logiPat = 1
let g:loaded_rrhelper = 1
let g:loaded_spellfile_plugin = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1

" netrw.vim
let g:netrw_dirhistmax = 0
let g:netrw_home = expand('<sfile>:p')
let g:netrw_keppj = ''

" man.vim, machit.vim
if !has('nvim')
    runtime ftplugin/man.vim
    set keywordprg=:Man
    autocmd vimrc FileType man setlocal nolist nonumber norelativenumber noswapfile

    packadd! matchit
endif
autocmd vimrc FileType man nmap <buffer> <2-LeftMouse> K

" dein.vim <https://github.com/Shougo/dein.vim>
let s:dein_conf = (exists('$XDG_CONFIG_HOME') ? expand('$XDG_CONFIG_HOME') : expand('$HOME/.config')) .. '/dein/dein_conf.vim'
source `=s:dein_conf`

" markdownのコードブロックにシンタックスハイライトを効かせる
let g:markdown_fenced_languages = [
    \ 'sh'
    \ , 'bash=sh'
    \ , 'zsh=sh'
    \ , 'awk'
    \ , 'c=cpp'
    \ , 'cpp'
    \ , 'haskell'
    \ , 'hs=haskell'
    \ , 'javascript=typescript'
    \ , 'js=typescript'
    \ , 'jsx=typescriptreact'
    \ , 'typescript'
    \ , 'ts=typescript'
    \ , 'tsx=typescriptreact'
    \ , 'json=typescript'
    \ , 'yaml'
    \ , 'css=scss'
    \ , 'scss'
    \ , 'vim'
    \ , 'vimscript=vim'
    \ , 'xml'
    \ , 'html'
    \]

" keybind
noremap! <C-A> <S-Left>
noremap! <C-Z> <S-Right>
noremap! <C-B> <Home>
noremap! <C-E> <End>

if executable('fcitx5-remote') == 1
    function! s:DisableInputMethod()
        silent! !fcitx5-remote -c
    endfunction

    autocmd vimrc InsertLeavePre * call s:DisableInputMethod()
endif

set nomodeline
set secure
